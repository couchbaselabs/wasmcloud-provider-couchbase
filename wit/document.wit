package wasmcloud:couchbase@0.1.0-draft;

/// Support CRUD access and modification of Documents stored in a Couchbase cluster.
///
/// Reference: https://docs.couchbase.com/c-sdk/current/concept-docs/documents.html
interface document {
  use types.{
      document, document-id, document-error, mutation-metadata, time, durability-level, retry-strategy, request-span,
      replica-read-level
  };

  /////////////////////////
  /// Document - Insert ///
  /////////////////////////

  /// Options for performing a document insert
  record document-insert-options {
    /// When the document should expire (nanoseconds)
    expires-in-ns: u64,

    /// (Deprecated)
    /// Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    persist-to: u64,

    /// (Deprecated)
    /// Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    replicate-to: u64,

    /// Durability level for the mutation
    ///
    /// (this should be used instead of persist-to/replicate-to)
    durability-level: durability-level,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Insert a document with a new ID
  insert: func(
    id: document-id,
    doc: document,
    options: option<document-insert-options>,
  ) -> result<mutation-metadata, document-error>;

  //////////////////////////
  /// Document - Replace ///
  //////////////////////////

  /// Options for performing a document replace
  record document-replace-options {
    /// CAS revision of the document
    cas: u64,

    /// When the document should expire (nanoseconds)
    expires-in-ns: u64,

    /// Whether to preserve expiration values set on any documents modified by the query
    preserve-expiry: bool,

    /// (Deprecated)
    /// Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    persist-to: u64,

    /// (Deprecated)
    /// Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    replicate-to: u64,

    /// Durability level for the mutation
    ///
    /// (this should be used instead of persist-to/replicate-to)
    durability-level: durability-level,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Replace a document with the given ID with a new document
  replace: func(
    id: document-id,
    doc: document,
    options: option<document-replace-options>,
  ) -> result<mutation-metadata, document-error>;

  /////////////////////////
  /// Document - Upsert ///
  /////////////////////////

  /// Options for performing a document upsert
  record document-upsert-options {
    /// When the document should expire (nanoseconds)
    expires-in-ns: u64,

    /// Whether to preserve expiration values set on any documents modified by the query
    preserve-expiry: bool,

    /// (Deprecated)
    /// Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    persist-to: u64,

    /// (Deprecated)
    /// Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    replicate-to: u64,

    /// Durability level for the mutation
    ///
    /// (this should be used instead of persist-to/replicate-to)
    durability-level: durability-level,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Create or update (replace) an existing document with the given ID
  upsert: func(
    id: document-id,
    doc: document,
    options: option<document-upsert-options>,
  ) -> result<mutation-metadata, document-error>;

  //////////////////////
  /// Document - Get ///
  //////////////////////

  /// Options for performing a document get
  record document-get-options {
    /// Whether expiry should also be retreived
    with-expiry: bool,

    /// Perform a projection of only specific paths of the result, returning only
    /// the fields indicated by the given list of paths.
    project: option<list<string>>,

    /// Timeout that should be used, in nanoseconds
    /// If not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// Level of replica read to enable
    use-replica: option<replica-read-level>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Options for retrieving a document from any replica
  record document-get-any-replica-options {
    /// Timeout that should be used, in nanoseconds
    /// If not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Options for retrieving a document from any replica
  record document-get-all-replica-options {
    /// Timeout that should be used, in nanoseconds
    /// If not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Result of a successfully executed document get
  record document-get-result {
    /// Document that was retrieved
    document: document,

    /// CAS revision of the document
    cas: u64,

    /// When the document should expire (nanoseconds)
    ///
    /// Deprecated: use expires-at instead
    expires-in-ns: option<u64>,

    /// Time when the document expires
    ///
    /// This field may not be present if `document-get-options.with-expiry` is not set
    expires-at: option<time>,
  }

  /// Result from a replica-aware document get
  record document-get-replica-result {
    /// Whether this document came from a replica server
    is-replica: bool,

    /// CAS revision of the document
    cas: u64,

    /// Document that was retrieved
    document: document,

    /// When the document should expire (nanoseconds)
    ///
    /// Deprecated: use expires-at instead
    expires-in-ns: option<u64>,

    /// Time when the document expires
    ///
    /// This field may not be present if `document-get-options.with-expiry` is not set
    expires-at: option<time>,
  }

  /// Retrieve a document by ID
  get: func(
    id: document-id,
    options: option<document-get-options>,
  ) -> result<document-get-result, document-error>;

  /// Retrieve a document by ID from any replica
  get-any-repliacs: func(
    id: document-id,
    options: option<document-get-any-replica-options>,
  ) -> result<document-get-replica-result, document-error>;

  /// Retrieve a document by ID from all replicas
  get-all-replicas: func(
    id: document-id,
    options: option<document-get-all-replica-options>,
  ) -> result<list<document-get-replica-result>, document-error>;

  /////////////////////////
  /// Document - Remove ///
  /////////////////////////

  /// Options for performing a document remove
  record document-remove-options {
    /// CAS revision of the document
    cas: u64,

    /// (Deprecated)
    /// Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    persist-to: u64,

    /// (Deprecated)
    /// Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    replicate-to: u64,

    /// Durability level for the mutation
    ///
    /// (this should be used instead of persist-to/replicate-to)
    durability-level: durability-level,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Remove a document by ID
  remove: func(
    id: document-id,
    options: option<document-remove-options>,
  ) -> result<mutation-metadata, document-error>;

  ///////////////////////////////
  /// Document - Get and Lock ///
  ///////////////////////////////

  /// Options for performing a document lock
  record document-get-and-lock-options {
    /// Amount of time to lock the document (nanoseconds)
    lock-time: u64,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,


    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Retrieve and Lock a document by ID
  get-and-lock: func(
    id: document-id,
    options: option<document-get-and-lock-options>,
  ) -> result<document-get-result, document-error>;

  /////////////////////////
  /// Document - Unlock ///
  /////////////////////////

  /// Options for performing a document lock
  record document-unlock-options {
    /// CAS revision of the document
    cas: u64,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Retrieve and Lock a document by ID
  unlock: func(
    id: document-id,
    options: option<document-unlock-options>,
  ) -> result<_, document-error>;

  ////////////////////////
  /// Document - Touch ///
  ////////////////////////

  /// Options for performing a document lock
  record document-touch-options {
    /// Time until the document expires (nanoseconds)
    expires-in: u64,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Retrieve and Lock a document by ID
  touch: func(
    id: document-id,
    options: option<document-touch-options>,
  ) -> result<mutation-metadata, document-error>;

  ////////////////////////////////
  /// Document - Get and Touch ///
  ////////////////////////////////

  /// Options for performing a document touch
  record document-get-and-touch-options {
    /// Time until the document expires (nanoseconds)
    expires-in: u64,

    /// Timeout that should be used, in nanoseconds
    /// Even if a timeout is not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Retrieve and Touch a document by ID
  get-and-touch: func(
    id: document-id,
    options: option<document-get-and-touch-options>,
  ) -> result<document-get-result, document-error>;
}
