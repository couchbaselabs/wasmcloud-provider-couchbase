package wasmcloud:couchbase@0.1.0-draft;

/// Supports arbitrary queries written in SQL++ (formerly known as N1QL) on a Couchbase cluster.
///
/// Reference: https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/index.html
interface sqlpp {
  use types.{mutation-state, query-scan-consistency, query-profile-mode, retry-strategy, request-span};
  use sqlpp-types.{sqlpp-value, sqlpp-query-error};

  /// Status of a SQL++ query
  enum sqlpp-query-status {
    unknown,
    running,
    success,
    errors,
    completed,
    stopped,
    timeout,
    closed,
    fatal,
    aborted,
  }

  /// Query metrics
  record sqlpp-query-metrics {
    elapsed-time-ns: u64,
    execution-time-ns: u64,
    result-count: u64,
    result-size: u64,
    mutation-count: u64,
    sort-count: u64,
    error-count: u64,
    warning-count: u64,
  }

  /// Warnings on SQL queries
  record sqlpp-query-warning {
    code: u32,
    message: string,  
  }

  /// Options usable when performing a SQL++ query
  record sqlpp-query-options {
    scan-consistency: query-scan-consistency,

    consistent-with: option<mutation-state>,

    /// Whether or not to profile the query
    profile: option<query-profile-mode>,

    /// Maximum buffered channel size between indexer connection manager and query service
    /// when performing index scans
    scan-cap: u32,

    /// Controls the nubmer of items execution operators can batch for Fetch from KV
    pipeline-batch: u32,

    /// Controls the nubmer of items execution operators can buffer between various operators
    pipeline-cap: u32,

    /// How long the indexer is allowed to wait until it can satisfy consistency criteria (in nanoseconds)
    scan-wait-ns: u64,

    /// Whether the query is readonly
    readonly: bool,

    /// Number of index partitions to use when computing aggregations in parallel
    max-parallelism: u32,

    /// Unique ID for this query which is used by connection manager and the server
    /// A generated UUID value will be assigned if this value is not provided
    client-context-id: option<string>,

    /// Whether to enable metrics collection
    metrics: bool,

    /// Whether the query is adhoc
    ad-hoc: bool,

    /// Timeout on the query in nanoseconds
    timeout-ns: u64,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,

    /// Whether to preserve expiration values set on any documents modified by the query
    preserve-expiry: bool,

    /// Whether to use a flex a index (i.e. using the search service)
    use-flex-index: bool,

  }

  /// Perform a N1QL query
  ///
  /// Note: you may *only* use positional parameters in your query
  query: func(
    query: string,
    params: list<sqlpp-value>,
    options: option<sqlpp-query-options>,
  ) -> result<sqlpp-value, sqlpp-query-error>;
}