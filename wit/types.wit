package wasmcloud:couchbase@0.1.0-draft;

/// General types that can be used throughout the couchbase interface
interface types {
  /// ID of a Document
  ///
  /// Note that Document IDs are expected to be:
  ///   - Assigned at the application level
  ///   - Be valid UTF-8 at the application level
  ///   - Be no longer than 250 bytes (not characters)
  type document-id = string;

  /// Path to a subdocument inside an existing document
  type subdocument-path = string;

  /// The span of a request, normally used when performing/enabling tracing
  type request-span = string;

  /// A string that is properly formatted JSON
  type json-string = string;

  /// Document field name (ex. to include in a search)
  type document-field-name = string;

  /// Collection name to include in a search
  type collection-name = string;

  /// Bucket name
  type bucket-name = string;

  /// Name of a search index
  type search-index-name = string;

  /// Whether to enable replica reads for the request
  enum replica-read-level {
    off,
    on,
  }

  /// Direction in which to perform sorting
  enum sort-direction {
    asc,
    desc,
  }

  /// Port of https://pkg.go.dev/time#Time
  record time {
    /// Offsets are assumed to be against the western hemisphere (GMT)
    /// i.e. -14 -> 0 -> +14 UTC
    offset: s8,
    year: s32,
    month: u8,
    day: u8,
    // 24hr time (i.e. 6PM is represented as `18`)
    hour: u8,
    minute: u8,
    second: u8,
    milliseconds: u32,
    nanoseconds: u32,
  }

  /// A keyspace-path that identifies a collection
  record collection {
    /// Bucket the collection belongs to
    bucket: bucket-name,
    /// Scope of the collection (ex. "_default" if not specified)
    scope: option<string>,
    /// Name of the collection (which may be a simple name, if only this value is specified)
    name: collection-name,
  }

  /// Errors that can occur during operations on documents
  variant document-error {
    /// Document could not be found
    not-found,
    /// CAS revision submitted to operation does not match value on server
    cas-mismatch,
    /// Document is locked
    locked,
    /// Unlock con a document that is not locked
    not-locked,
    /// Document cannot be retrieved (from any replica)
    unretrievable,
    /// Document already exists (i.e. a duplicate)
    already-exists,
    /// Document is not JSON
    not-json,
    /// Document does not contain the specified sub-document path
    path-not-found,
    /// Sub-document path is invalid (could not be parsed)
    path-invalid,
    /// Sub-document path is too deeply nested
    path-too-deep,
    /// Sub-document operation could not insert
    invalid-value,
    /// An invalid delta is used when performing a sub-document operation
    subdocument-delta-invalid,
  }

  /// Errors that occur when building/using document values
  variant document-value-create-error {
    /// JSON used to create the document value was invalid
    invalid-json(string),
  }

  /// An implementer specific (efficient) implementation of a Document value
  resource document-value {
    /// Construct an empty document value (a dictionary, by default)
    constructor();

    /// Convert this JSON value into a string
    to-string: func() -> string;

    /// Build a document-value from a stringified JSON value
    from-json: static func(json: string) -> result<document-value, document-value-create-error>;
  }

  /// WIT cannot currently support passing recursive value types, which means JSON cannot be properly
  /// represetned as a WIT level type.
  ///
  /// What we use instead is a variant with two types:
  /// - a valid JSON string (which may or may not be an object)
  /// - an implementer-controlled value which is a valid JSON object (as defined by the implementer)
  ///
  /// The implementer-controlled value can be any implementation (usually a more efficient one)
  /// that can be understood by the implementer. One requirement on this value is that it must be
  /// possible to convert it to/from a raw JSON string at any time.
  ///
  /// An opaque resource that represents a JSON value, and can be efficiently
  /// manipulated by implementers.
  variant document {
    /// A stringified JSON value represented by a resource, often used by callers
    /// that cannot or do not want to construct an efficient implementer specific JSON value
    raw(json-string),

    /// A JSON value represented by a more efficient but opaque implementer-specific representation
    %resource(document-value),
  }

  /// Errors related to bucket usage
  variant bucket-error {
    /// A completely unexpected error
    unexpected(string)
  }

  /// Metadata related to any mutation on a Couchbase collection (ex. CRUD operations)
  record mutation-metadata {
    /// CAS revision of the document
    cas: u64,
    /// The bucket on which the mutation was performed
    bucket: string,
    /// The ID of the vbucket (partition) that the operation was performed on
    partition-id: u64,
    /// The UUID of the vbucket (partition) that the operation was performed on
    partition-uuid: u64,
    /// The sequence number of the operation performed on the vbucket (partition)
    seq: u64,
  }

  /// Durability level that should be used for operations
  enum durability-level {
    unknown,

    none,

    /// Replicate (hold in memory) to a majority of nodes
    replicate-majority,

    /// Replicate (hold in memory) to a majority of nodes, persist (write to disk) to master
    replicate-majority-persist-master,

    /// Persist to a majority of nodes
    persist-majority,
  }

  /// As functions cannot be represented as part of types in WIT,
  /// we represent static retry strategies
  variant retry-strategy {
    /// Retry a certain number of times with a given interval between each retry)
    interval-times-ms(tuple<u64, u64>),
  }

  /// Level of data consistency required for a query
  enum query-scan-consistency {
    /// No data consistency required
    not-bounded,
    /// Request-level data consistency is required
    request-plus,
  }

  /// Profiling mode to use during a query
  enum query-profile-mode {
    /// Disable query profiling
    none,
    /// Include phase-boudned profiling information in the response
    phases,
    /// Include timing profiling informatoin in the query response
    timings,
  }

  /// Level of data consistency required for a search
  enum search-scan-consistency {
    /// No data consistency required
    not-bounded,
  }

  /// Individual mutation token
  record mutation-token {
    bucket-name: string,
    partition-uuid: u64,
    partition-id: u64,
    sequence-number: u64,
  }

  /// Collection of mutation tokens that represent a single state
  record mutation-state {
    tokens: list<mutation-token>,
  }
}