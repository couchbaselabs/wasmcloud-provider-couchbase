package wasmcloud:couchbase@0.1.0-draft;

/// Perform sub-document lookup operations on Documents stored in a Couchbase cluster
///
/// Reference: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#retrieving
interface subdocument-lookup {
  use types.{
    document-id, request-span, document, subdocument-path, document-error, retry-strategy, mutation-metadata
  };

  /// Options for performing a lookup
  record lookup-get-options {
    /// Whether the lookup refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  type lookup-exists-options = lookup-get-options;
  type lookup-count-options = lookup-get-options;

  /// Types of different lookup operations that can be specified
  variant lookup-operation {
    /// Whether the particular path exists
    exists(tuple<subdocument-path, lookup-exists-options>),
    /// Whether the particular path exists
    get(tuple<subdocument-path, lookup-get-options>),
    /// Whether the particular path exists
    count(tuple<subdocument-path, lookup-count-options>),
  }

  /// Errors that occur during lookup operation
  variant lookup-error {
    /// A completely unexpected error
    unexpected(string),
  }

  /// Options that control the lookup operation
  record lookup-options {
    /// Timeout that should be used, in nanoseconds
    /// If not specified, the implementer *may* provide a default timeout.
    timeout-ns: option<u64>,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,
  }

  /// Documents that are returned from lookup-in operations
  record lookup-in-document {
    /// CAS revision of the document
    cas: u64,

    /// Value that was retrieved
    document: document,
  }

  /// Documents that are returned from lookup-in operations on replicas
  record lookup-in-replica-document {
    /// CAS revision of the document
    cas: u64,

    /// Whether this document came from a replica server
    is-replica: bool,

    /// Value that was retrieved
    document: document,
  }

  /// Errors that occur during lookup for an individual subdocument path
  variant subdocument-lookup-error {
    /// The provided path does not exist in the document
    path-does-not-exist(string),
    /// Type Conflict between the path in the document and path command
    path-mismatch(string),
    /// A document error
    document-error(document-error),
    /// A completely unexpected error
    unexpected(string),
  }

  /// Perform a lookup of one or more specs in a given document
  lookup: func(
    id: document-id,
    operations: list<lookup-operation>,
    options: lookup-options,
  ) -> result<list<result<lookup-in-document, subdocument-lookup-error>>, lookup-error>;

  /// Perform a lookup on a particular document from any replica server
  lookup-in-any-replicas: func(
    id: document-id,
    operations: list<lookup-operation>,
    options: lookup-options,
  ) -> result<list<result<lookup-in-replica-document, subdocument-lookup-error>>, lookup-error>;

  /// Perform a lookup on a particular document from all replica servers
  lookup-in-all-replicas: func(
    id: document-id,
    operations: list<lookup-operation>,
    options: lookup-options,
  ) -> result<list<list<result<lookup-in-replica-document, subdocument-lookup-error>>>, lookup-error>;
}

/// Perform sub-document mutation operations on Documents stored in a Couchbase cluster
///
/// Reference: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#mutating
interface subdocument-mutate {
  use types.{
    document-id, request-span, document, durability-level, subdocument-path, document-error, retry-strategy,
    replica-read-level
  };

  /// Semantics to use for document level actions during mutation
  enum store-semantics {
    /// Replace the document
    replace,
    /// Replace the document or create if it doesn't exist
    upsert,
    /// Create the document, failing if it doesn't exist
    insert,
  }

  /// Options for performing an insert mutation operation
  record insert-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an upsert mutation operation
  record upsert-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an replace mutation operation
  record replace-options {
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an remove mutation operation
  record remove-options {
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an array append mutation operation
  record array-append-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an array insert mutation operation
  record array-insert-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an array prepend mutation operation
  record array-prepend-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }

  /// Options for performing an array add mutation operation
  record array-add-unique-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: bool,
  }

  /// Options for performing an operations on counters
  record counter-operation-options {
    /// Whether the path should be created
    create-path: bool,
    /// Whether the mutate refers to an extended attribute, rather than the document itself
    xattr: option<bool>,
  }
  type decrement-options = counter-operation-options;
  type increment-options = counter-operation-options;

  /// Operations that can be performed when mutating
  variant mutate-operation {
    /// Insert a value at the specified path within a document
    insert(tuple<subdocument-path, document, insert-options>),

    /// Upsert a value into an existing document at the given path
    upsert(tuple<subdocument-path, document, upsert-options>),

    /// Replace the value at the given path
    replace(tuple<subdocument-path, document, replace-options>),

    /// Remove the field at the given path
    remove(tuple<subdocument-path, remove-options>),

    /// Increment a counter value
    increment(tuple<subdocument-path, s64, increment-options>),

    /// Decrement a counter value
    decrement(tuple<subdocument-path, s64, decrement-options>),

    /// Perform a dictionary add unique operation
    array-add-unique(tuple<subdocument-path, array-add-unique-options>),

    /// Add an element to the end (i.e. right) of an array
    array-append(tuple<tuple<subdocument-path, document>, array-append-options>),

    /// Add multiple element to the end (i.e. right) of an array
    array-append-multi(tuple<list<tuple<subdocument-path, document>>, array-append-options>),

    /// Insert an element into an array, at a given position which is specified as part of the path
    /// (ex. 'path.to.array[3]')
    array-insert(tuple<tuple<subdocument-path, document>, array-insert-options>),

    /// Insert multiple elements into an array, at a given position which is specified as part of the path
    /// (ex. 'path.to.array[3]')
    array-insert-multi(tuple<list<tuple<subdocument-path, document>>, array-insert-options>),

    /// Add an element to the beginning (i.e. left) of an array
    array-prepend(tuple<tuple<subdocument-path, document>, array-prepend-options>),

    /// Add multiple elements to the beginning (i.e. left) of an array
    array-prepend-multi(tuple<list<tuple<subdocument-path, document>>, array-prepend-options>),
  }

  /// Errors that occur during mutate batch operations
  variant mutate-error {
    /// A completely unexpected error
    unexpected(string),
  }

  /// Errors that occur during mutate for an individual subdocument path
  variant subdocument-mutate-error {
    /// The path already exists (ex. during an insert)
    path-already-exists(string),
    /// A completely unexpected error
    unexpected(string),
  }

  /// Options for performing batches of mutation
  record mutate-options {
    /// Nanoseconds until the mutation operation should expire
    expires-in-ms: u64,

    /// Nanoseconds until the mutation operation should time out
    timeout-ns: u64,

    /// CAS revision of the document
    cas: u64,

    /// Durability level for the mutation
    ///
    /// (this should be used instead of persist-to/replicate-to)
    durability-level: durability-level,

    /// Semantics on the store
    ///
    /// (this should be used instead of persist-to/replicate-to)
    store-semantics: store-semantics,

    /// How and whether to retry the operation
    retry-strategy: option<retry-strategy>,

    /// A known span to associate this lookup with
    parent-span: option<request-span>,

    /// Level of replica read to enable
    use-replica: option<replica-read-level>,

    /// Whether to preserve expiry
    preserve-expiry: bool,

    /// (Deprecated)
    /// Traditional durability settings for persistence, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    persist-to: u64,

    /// (Deprecated)
    /// Traditional durability settings for replication, only usable from Couchbase versions earlier than 6.0
    ///
    /// See: https://docs.couchbase.com/go-sdk/current/howtos/subdocument-operations.html#1.6@go-sdk::durability.adoc
    replicate-to: u64,
  }

  /// Metadata related to any mutation on a Couchbase collection (ex. CRUD operations)
  ///
  /// todo(fix): mutation-metadata is included for a second time here because wit-bindgen
  /// does not currently correctly pull the definition in the types interface.
  record mutation-metadata {
    /// CAS revision of the document
    cas: u64,
    /// The bucket on which the mutation was performed
    bucket: string,
    /// The ID of the vbucket (partition) that the operation was performed on
    partition-id: u64,
    /// The UUID of the vbucket (partition) that the operation was performed on
    partition-uuid: u64,
    /// The sequence number of the operation performed on the vbucket (partition)
    seq: u64,
  }

  /// Result of a successfully executed mutation operation
  record mutation-result {
    /// End result of the mutation
    document: document,
    /// Metadata related to the mutation
    metadata: mutation-metadata,
  }

  /// Perform a mutate of one or more specs in a given document
  mutate: func(
    id: document-id,
    operations: list<mutate-operation>,
    options: mutate-options,
  ) -> result<list<result<mutation-result, subdocument-mutate-error>>, mutate-error>;
}